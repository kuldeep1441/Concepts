// A pointer is a variable that stores the memory address of another variable, rather than storing a direct value. They are powerful and essential in low-level programming, particularly in languages like C, C++, and assembly, where memory management is crucial. Understanding pointers is fundamental for working with dynamic memory, arrays, functions, and system-level programming.

// 1. Pointer Declaration and Initialization
// To declare a pointer, we use the * symbol. For example:
// int *ptr;   // Declares a pointer to an integer

// To assign an address to the pointer, we use the address-of operator &. Here's how we initialize it:
// int var = 10;
// int *ptr = &var;  // `ptr` stores the memory address of `var`


// Dereferencing a pointer means accessing the value stored at the memory location it points to. This is done using the * operator.



// The amount of memory a pointer takes depends on the architecture of the system you're working on. The size of a pointer is generally the same as the size of the memory address it holds, which is dependent on whether the system is 32-bit or 64-bit.

// Common Sizes:
// 32-bit system: A pointer takes 4 bytes (32 bits).
// 64-bit system: A pointer takes 8 bytes (64 bits).
// Explanation:
// In a 32-bit system, the memory addresses are 32 bits long, so a pointer needs 4 bytes to store an address.
// In a 64-bit system, the memory addresses are 64 bits long, so a pointer needs 8 bytes to store an address.
