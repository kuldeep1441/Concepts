How is the health of servers decided?
Load balancers and orchestration systems (like Kubernetes, ECS) use health checks to determine if a server is healthy and should receive traffic.

Types of Health Checks
TCP Check
Verifies if the server’s TCP port is open.
Simple, but doesn’t guarantee app readiness.

There are two main entities that can perform health checks:

1. Load Balancer Health Checks
Example: AWS ALB, NLB, or Nginx when acting as a load balancer.
It sends HTTP/HTTPS/TCP requests to a specific path (like /health or /status).
Expects 200 OK (or a successful TCP handshake).
If check fails: Load balancer removes that instance from rotation.

2. Orchestrator Health Checks
Example: Kubernetes, ECS, Docker Swarm.
Uses liveness and readiness checks:
Liveness → Is the container alive? If not, restart it.
Readiness → Is the container ready to receive traffic? If not, don’t send traffic.

Orchestrator keep track of memory, cpu and disk utilization of load balancers and server and if the exceeds limit then add up new servers.

when a new load balancer is added it's IP address is listed down in DNS (By Orchestrator) which follow only round robin in selecting load balancers.

ECS VS KUBERNETES

| Feature             | **AWS ECS**                                 | **Kubernetes (EKS)
| ------------------- | ------------------------------------------- | ---------------------
| **Type**            | Managed **container orchestration** by AWS  | Open-source orchestration (EKS is AWS-managed)
| **Portability**     | **AWS only**                                | **Multi-cloud & on-prem**
| **Control Plane**   | Managed by AWS                              | Managed by AWS (EKS) or self-hosted
| **Compute Options** | **EC2 instances** or **Fargate**            | **EC2 instances**, **Fargate**, or any node
| **Scaling**         | Service Auto Scaling + Cluster Auto Scaling | HPA (Pods) + Cluster Autoscaler
| **Load Balancing**  | Native **ALB/NLB** integration              | **Ingress Controller + ELB/ALB**
| **Networking**      | AWS VPC native                              | CNI plugins (AWS CNI for EKS)
| **Complexity**      | Easier (tied to AWS)                        | More complex but very flexible
| **Ecosystem**       | Limited to AWS                              | Huge ecosystem (Istio, Helm, Prometheus, etc.)
| **Custom Metrics**  | Supported with CloudWatch                   | Supported with Prometheus, Metrics API
| **Vendor Lock-in**  | High                                        | Low
