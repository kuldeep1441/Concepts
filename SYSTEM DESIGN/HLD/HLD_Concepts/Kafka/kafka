Apache Kafka â€“ Complete Overview

1. What is Kafka?
Kafka is a distributed event streaming platform. (Message stream type of message broker)
(Allow asynchronous communication between microservices while handling heavy trafic with reliability.)

It allows high-throughput, fault-tolerant, real-time data pipelines and streaming applications.

| Concept            | Meaning  
-------------------------------------------------------------------------- |
| **Topic**          | A category or feed where events/messages are published.
| **Partition**      | A topic is split into partitions for **parallelism & scalability**.
| **Producer**       | Service that **sends/publishes events** to Kafka.
| **Consumer**       | Service that **reads events** from Kafka.
| **Consumer Group** | Multiple consumers that **share the consumption of partitions**.
| **Broker**         | A Kafka server that stores messages and serves clients.
| **Cluster**        | Multiple Kafka brokers working together for **fault tolerance & scalability**.
| **Offset**         | Position of a message in a partition (used to track what has been read).
| **Zookeeper**      | Manages cluster metadata and broker coordination (Kafka now moving to KRaft mode to remove Zookeeper).


How Kafka Works (Step by Step)

Producer sends a message to a Kafka topic.
Topic may have multiple partitions â†’ message is stored in a partition. (partition by a key ex: studentId in notification)
Kafka persists messages to disk for a configured retention period (so consumers can replay).
Consumer reads messages from topic partitions.
Consumer group coordination:
Each partition is consumed by only one consumer in the group.
Multiple consumers can read different partitions in parallel.
Offset tracking ensures consumers can resume reading from where they left off. (commit records to avoid un-necssary work)


**Kafka Batching (One of the Reason why kafka is so benifitial for performace is batching)**
Batching means grouping multiple messages together and sending them as one unit instead of one by one. Kafka applies batching on producer, broker, and consumer sides.

ðŸ”¹ Example
Without batching: 1000 messages â†’ 1000 requests + 1000 writes.
With batching (500 messages/batch): 1000 messages â†’ 2 requests + 2 sequential writes.
ðŸ‘‰ Huge performance gain.
