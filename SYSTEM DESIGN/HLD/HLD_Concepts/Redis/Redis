What is Redis ? (Redis is single threaded)
Redis is an open-source(free to use) in-memory database, meaning all data is stored in RAM.
Self-hosted or managed (AWS ElastiCache)

Benifits of using Redis =>
1 Best for Cashing(reduce DB load), Session Management(Session storage), message queue functionality & Real-Time Analytics(eg: showing online/offline status of user).
& also work as realtime pupshup to allow communication between servers.
2 Rich Data structures (Strings, Lists, Hashes, Sets, Maps & Bitmaps)

Limitation of using Redis =>
1 If the server crashes or restarts, you can lose data unless persistence is enabled (RDB(Redis Database Backup) or AOF(Append-Only File)).
2 As data is stored in RAM : Redis ≠ cost-efficient for storing huge historical datasets.

(
RDB && AOF : 
RDB is a snapshot-based persistence method, it creates point-in-time snapshots of the dataset and saves them as a .rdb file on disk ((e.g: every 5 minutes if 100 keys changed)))(Copies the dataset from memory & Writes it to disk in a binary format.

AOF : is a persistence mechanism that records every write operation (such as SET, HSET, INCR, etc.) that the Redis server receives. These commands are appended sequentially to a log file (appendonly.aof) on disk, allowing Redis to replay them during restart to restore the dataset to its previous state.
)

(****IMPORTANT*****
In redis (connection pools a library) is used to created pre-established connection that every server makes with database to reduce latency as it prevent (tcp 3 way handshake + tear-down) and connection pools are also break if there is no use for let's say 10min.
connection pools give massive massive performance boost to database and response time

| Aspect            | **Stateless Connection Pool**         | **Stateful Connection Pool**               |
| ----------------- | ------------------------------------- | ------------------------------------------ |
| **Session State** | Not maintained between requests       | Maintained across multiple requests        |
| **Scalability**   | Easy (works well with load balancers) | Hard (requires sticky sessions)            |
| **Use Case**      | REST APIs, simple queries             | Transactions, chat systems, streaming apps |
| **Complexity**    | Low                                   | High                                       |

Scenario: E-Commerce Checkout with Stateful DB Session

You start a checkout process on an e-commerce website.
The backend uses a stateful connection pool with database transactions:
API server A opens a DB connection and starts a transaction (adds items, calculates discounts).
The transaction context (partial updates, temp data) lives on API server A + its DB session.
Next request: You click “Pay Now”.
If the load balancer sends this request to API server B, it won’t find the transaction session, because:
API server B has no knowledge of the state in server A.
DB transaction is tied to the session in API server A’s pool.
✅ Sticky sessions solve this:
Load balancer ensures all requests from the same user go to the same API server (A) during the session.
)